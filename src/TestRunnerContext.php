<?php

declare(strict_types=1);

namespace Bex\Behat\Context;

use Behat\Behat\Context\SnippetAcceptingContext;
use Behat\Gherkin\Node\PyStringNode;
use Behat\Testwork\Hook\Scope\AfterTestScope;
use Bex\Behat\Context\Services\ProcessFactory;
use Bex\Behat\Context\Services\ProcessFactoryInterface;
use RuntimeException;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Process\Process;
use Webmozart\Assert\Assert;

/**
 * Class TestRunnerContext
 *
 * This class provides steps to execute a secondary Behat process in order to test Behat extension under development.
 * It creates a test environment in the system temp directory.
 *
 * PHP's built-in web server is used to emulate a website for testing. Use steps from this context to create pages
 * in document root.
 *
 * @example Create an index.html file with some content in it:
 * ```yml
 * Given I have the file "index.html" in document root:
 *  """
 *  <!DOCTYPE html>
 *  <html>
 *      <head>
 *          <meta charset="UTF-8">
 *          <title>Test page</title>
 *      </head>
 *
 *      <body>
 *          <h1>Lorem ipsum dolor amet.</h1>
 *      </body>
 *  </html>
 *  """
 * ```
 * @example Start the web server:
 * ```yml
 * Given I have a web server running on host "localhost" and port "8080"
 * ```
 *
 * When Selenium2 driver is in use, a compatible browser is expected to be installed which will be controlled by tests.
 * Define the executable file of the browser in behat.yml by passing on the "browserCommand" parameter to this context
 * class.
 * @example PhantomJS is installed by Composer into the project bin directory. Add context to your project like this:
 * ```yml
 * default:
 *   suites:
 *     default:
 *       contexts:
 *         - TestRunnerContext:
 *           browserCommand: %paths.base%/bin/phantomjs --webdriver=4444
 * ```
 *
 * @author Geza Buza <bghome@gmail.com>
 * @license http://opensource.org/licenses/MIT The MIT License
 */
final class TestRunnerContext implements SnippetAcceptingContext
{
    /** @var Filesystem */
    private $filesystem;

    /** @var string|null */
    private $workingDirectory;

    /** @var ?string */
    private $documentRoot;

    /** @var Process[] */
    private $processes = [];

    /** @var Process */
    private $behatProcess;

    /** @var ?string */
    private $browserCommand;

    /** @var ProcessFactoryInterface */
    private $processFactory;

    /** @var string[] */
    private $files = [];

    /** @var bool */
    private $isAutogeneratedWorkingDirectory = false;

    public function __construct(
        ?string $browserCommand = null,
        Filesystem $fileSystem = null,
        ProcessFactoryInterface $processFactory = null,
        ?string $workingDirectory = null
    ) {
        $this->browserCommand = $browserCommand;
        $this->filesystem = $fileSystem ?: new Filesystem();
        $this->processFactory = $processFactory ?: new ProcessFactory();
        $this->workingDirectory = $workingDirectory;
        $this->isAutogeneratedWorkingDirectory = ($workingDirectory === null);
    }

    public function addProcess(Process $process): void
    {
        $this->processes[] = $process;
    }

    public function getProcesses(): array
    {
        return $this->processes;
    }

    /**
     * @BeforeScenario
     */
    public function beforeRunTests(): void
    {
        $this->createWorkingDirectory();
    }

    /**
     * @AfterScenario
     */
    public function afterRunTests(AfterTestScope $scope): void
    {
        $this->clearWorkingDirectory();
        $this->destroyProcesses();
        $this->printTesterOutputOnFailure($scope);
    }

    public function createWorkingDirectory(): void
    {
        if ($this->getWorkingDirectory() === null) {
            $tmpPath = tempnam(sys_get_temp_dir(), 'behat-test-runner');
            Assert::notFalse($tmpPath, 'Could not create temporary directory for test runner.');
            Assert::string($tmpPath);
            $this->workingDirectory = $tmpPath;
            $this->filesystem->remove($tmpPath);
        }

        $workingDirectory = $this->getWorkingDirectory();
        Assert::notNull($workingDirectory);
        Assert::string($workingDirectory);

        if (!$this->filesystem->exists($workingDirectory)) {
            $this->filesystem->mkdir($workingDirectory, 0770);
        }

        $featuresDirectory = sprintf('%s/features/bootstrap', $workingDirectory);

        if (!$this->filesystem->exists($featuresDirectory)) {
            $this->filesystem->mkdir(sprintf('%s/features/bootstrap', $workingDirectory), 0770);
        }

        $this->documentRoot = sprintf('%s/document_root', $workingDirectory);

        if (!$this->filesystem->exists($this->documentRoot)) {
            $this->filesystem->mkdir($this->documentRoot, 0770);
        }
    }

    public function getWorkingDirectory(): ?string
    {
        Assert::nullOrString($this->workingDirectory);

        return $this->workingDirectory;
    }

    public function clearWorkingDirectory(): void
    {
        if ($this->isAutogeneratedWorkingDirectory) {
            $workingDirectory = $this->getWorkingDirectory();
            Assert::notNull($workingDirectory);
            Assert::string($workingDirectory);

            $this->filesystem->remove($workingDirectory);
        } else {
            $this->filesystem->remove($this->files);
        }

        $this->files = [];
    }

    public function createFile(string $fileName, string $content): void
    {
        $this->filesystem->dumpFile($fileName, $content);
        $this->files[] = $fileName;
    }

    public function destroyProcesses(): void
    {
        foreach ($this->getProcesses() as $process) {
            if ($process->isRunning()) {
                $process->stop(10);
            }
        }

        $this->processes = [];
    }

    public function printTesterOutputOnFailure(AfterTestScope $scope): void
    {
        if ($this->behatProcess !== null && !$scope->getTestResult()->isPassed()) {
            $outputFile = sys_get_temp_dir() . '/behat-test-runner.out';
            $this->filesystem->dumpFile(
                $outputFile,
                $this->behatProcess->getOutput() . $this->behatProcess->getErrorOutput()
            );

            throw new RuntimeException("Output of secondary Behat process has been saved to $outputFile");
        }
    }

    /**
     * @Given I have the configuration:
     */
    public function iHaveTheConfiguration(PyStringNode $input): void
    {
        $file = $this->workingDirectory . '/behat.yml';
        $this->createFile($file, $input->getRaw());
    }

    /**
     * @Given I have the feature:
     */
    public function iHaveTheFeature(PyStringNode $input): void
    {
        $file = $this->workingDirectory . '/features/feature.feature';
        $this->createFile($file, $input->getRaw());
    }

    /**
     * @Given I have the context:
     */
    public function iHaveTheContext(PyStringNode $input): void
    {
        $file = $this->workingDirectory . '/features/bootstrap/FeatureContext.php';
        $this->createFile($file, $input->getRaw());
    }

    /**
     * @When I run Behat
     * @When /^I run Behat with "([^"]*)" parameter[s]?$/
     * @When /^I run Behat with "([^"]*)" parameter[s]? and with PHP CLI arguments "([^"]*)"$/
     * @When I run Behat with PHP CLI arguments :phpParameters
     */
    public function iRunBehat(string $parameters = '', string $phpParameters = ''): void
    {
        $this->runBehat($parameters, $phpParameters);
    }

    /**
     * @Given I have the file :filename in document root:
     */
    public function iHaveTheFileInDocumentRoot(string $filename, PyStringNode $content): void
    {
        $file = $this->documentRoot . '/' . $filename;
        $this->createFile($file, $content->getRaw());
    }

    /**
     * @Given I have a web server running on host :hostname and port :port
     */
    public function iHaveAWebServerRunningOnAddressAndPort(string $hostname, string $port): void
    {
        $this->runWebServer($hostname, $port);
        $this->runBrowser();
    }

    /**
     * @Then I should see a failing test
     */
    public function iShouldSeeAFailingTest(): void
    {
        if ($this->behatProcess->isSuccessful()) {
            throw new RuntimeException('Behat did not find any failing scenario.');
        }
    }

    /**
     * @Then I should not see a failing test
     */
    public function iShouldNotSeeAFailingTest(): void
    {
        if (!$this->behatProcess->isSuccessful()) {
            throw new RuntimeException('Behat found a failing scenario.');
        }
    }

    public function getStandardOutputMessage(): string
    {
        return $this->behatProcess->getOutput();
    }

    public function getStandardErrorMessage(): string
    {
        return $this->behatProcess->getErrorOutput();
    }

    private function runBehat(string $parameters = '', string $phpParameters = ''): void
    {
        $workingDirectory = $this->getWorkingDirectory();
        Assert::string($workingDirectory);

        $process = $this->processFactory->createBehatProcess($workingDirectory, $parameters, $phpParameters);
        $this->behatProcess = $process;
        $this->addProcess($process);
        $process->run();
    }

    private function runWebServer(string $hostname, string $port): void
    {
        if ($this->documentRoot === null) {
            $this->createWorkingDirectory();
        }

        $documentRoot = $this->documentRoot;
        Assert::string($documentRoot);

        $process = $this->processFactory->createWebServerProcess($documentRoot, $hostname, $port);
        $this->addProcess($process);
        $process->start();
    }

    private function runBrowser(): void
    {
        $browserCommand = $this->browserCommand;
        if (null === $browserCommand) {
            return;
        }

        $workingDirectory = $this->getWorkingDirectory();
        Assert::string($workingDirectory);

        $process = $this->processFactory->createBrowserProcess($browserCommand, $workingDirectory);
        $this->addProcess($process);
        $process->start();
    }
}
